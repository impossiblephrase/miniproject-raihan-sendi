// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// declare enum
enum SaleType {
  paid
  free
}
// sample
model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
}

// declare table
model Events {
  id Int @id @default(autoincrement())
  name String
  slug String
  start_date DateTime @db.DateTime
  end_date DateTime @db.DateTime
  price Decimal? @db.Decimal(10, 0)
  discount_price Decimal? @db.Decimal(10, 0)
  city_id Int?
  location String? @db.VarChar(100)
  description String? @db.Text
  seats Int?
  event_type_id Int?
  event_category_id Int?
  created_by Int
  updated_by Int?
  sale_type SaleType?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  eventType Event_type? @relation(fields: [event_type_id], references: [id])
  eventCategory Event_category? @relation(fields: [event_category_id], references: [id])
  rating Event_reviews_ratings []
  promotions Promotions[]
  cities Cities? @relation(fields: [city_id], references: [id])
  tickets Tickets[]
}

model Event_category {
  id Int @id @default(autoincrement())
  name String
  events Events[]
}

model Event_type {
  id Int @id @default(autoincrement())
  name String
  events Events[]
}

model Event_reviews_ratings {
  id Int @id @default(autoincrement())
  event_id Int
  user_id Int
  comments String?
  rating Int?
  events Events @relation(fields: [event_id], references: [id])
}

model Countries {
  id Int @id @default(autoincrement())
  name String
  regions Regions[]
}

model Regions {
  id Int @id @default(autoincrement())
  country_id Int
  region_name String
  countries Countries @relation(fields: [country_id], references: [id])
  cities Cities[]
}

model Cities {
  id Int @id @default(autoincrement())
  region_id Int
  city_name String
  regions Regions @relation(fields: [region_id], references: [id])
  events Events[]
}

model Transactions {
  id Int @id @default(autoincrement())
  code String
  user_id Int
  event_id Int
  qty Int
  tax Decimal @db.Decimal(10, 0)
  point_used Decimal? @db.Decimal(10, 0)
  total_amount Decimal @db.Decimal(10, 0)
  voucher_id Int?
  payment_method_id Int
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  user Users @relation(fields: [user_id], references: [id])
  payment_method Payment_method @relation(fields: [payment_method_id], references: [id])
  tickets Tickets[]
}

model Users {
  id Int @id @default(autoincrement())
  fullname String? // Optional. Actual full name of a user to be shown in their profile, not for login.
  email String? @unique // Optional.
  phone_number String? @unique
  username String @unique // Username for login.
  password String
  referral_code String? @unique // '?' to allow null for organizer.
  pointExpirations  Point_Expiration[] // Reverse relation to the Point_Expiration table.
  role_id Int @default(1)
  total_point Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  referral_code_user Referral_code_user[]
  role Roles @relation(fields: [role_id], references: [id])
  transactions Transactions[]
  vouchers Vouchers[]
  tickets Tickets[]
  points Points[]
}

model Point_Expiration {
  id         Int      @id @default(autoincrement())
  user_id    Int
  point      Decimal  @db.Decimal(10, 0)
  expired_at DateTime @db.DateTime
  users      Users    @relation(fields: [user_id], references: [id]) // Foreign key relation to the Users table.
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
  users Users[]
}

model Referral_code_user {
  id Int @id @default(autoincrement())
  master_user_id Int
  user_id Int 
  users Users @relation(fields: [user_id], references: [id])
}

model Promotions {
  id Int @id @default(autoincrement())
  event_id Int?
  name String
  type String
  image String?
  is_banner Boolean
  start_date DateTime @db.DateTime
  end_date DateTime @db.DateTime
  created_by Int
  updated_by Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  events Events? @relation(fields: [event_id], references: [id])
  vouchers Vouchers[]
}

model Vouchers {
  id Int @id @default(autoincrement())
  promotion_id Int?
  user_id Int?
  payment_method Int?
  voucher_code String
  qty Int
  type String
  category String
  amount Int
  status Boolean
  start_date DateTime @db.DateTime
  end_date DateTime @db.DateTime
  created_by Int?
  updated_by Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  user Users? @relation(fields: [user_id],references: [id])
  promotions Promotions? @relation(fields: [promotion_id], references: [id])
}

model Payment_method {
  id Int @id @default(autoincrement())
  name String
  admin_fee Decimal @db.Decimal(10, 0)
  transactions Transactions[]
}

model Points {
  id Int @id @default(autoincrement())
  user_id Int
  point Decimal @db.Decimal(10, 0)
  expired_at DateTime @db.DateTime
  users Users @relation(fields: [user_id], references: [id])
}

model Tickets {
  id Int @id @default(autoincrement())
  transaction_id Int
  user_id Int
  event_id Int
  code String
  status String
  valid_until DateTime @db.DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.DateTime
  transaction Transactions @relation(fields: [transaction_id], references: [id])
  users Users @relation(fields: [user_id], references: [id])
  events Events @relation(fields: [event_id], references: [id])
}
